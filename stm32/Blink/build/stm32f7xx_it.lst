ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-sp-d16
  26              	NMI_Handler:
  27              	.LFB144:
  28              		.file 1 "Core/Src/stm32f7xx_it.c"
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f7xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f7xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f7xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f7xx_it.c ****   *
  17:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f7xx_it.c ****   */
  19:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f7xx_it.c **** 
  21:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f7xx_it.c **** #include "main.h"
  23:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  24:Core/Src/stm32f7xx_it.c **** #include "usart.h"
  25:Core/Src/stm32f7xx_it.c **** #include <stdio.h>
  26:Core/Src/stm32f7xx_it.c **** #include <string.h>
  27:Core/Src/stm32f7xx_it.c **** #include "utils.h"
  28:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 2


  31:Core/Src/stm32f7xx_it.c **** 
  32:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
  34:Core/Src/stm32f7xx_it.c **** 
  35:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  36:Core/Src/stm32f7xx_it.c **** 
  37:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  39:Core/Src/stm32f7xx_it.c **** 
  40:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  41:Core/Src/stm32f7xx_it.c **** 
  42:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  44:Core/Src/stm32f7xx_it.c **** 
  45:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  46:Core/Src/stm32f7xx_it.c **** 
  47:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  49:Core/Src/stm32f7xx_it.c **** 
  50:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  51:Core/Src/stm32f7xx_it.c **** 
  52:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/stm32f7xx_it.c **** 
  55:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  56:Core/Src/stm32f7xx_it.c **** 
  57:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/stm32f7xx_it.c **** 
  60:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  61:Core/Src/stm32f7xx_it.c **** 
  62:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  63:Core/Src/stm32f7xx_it.c **** extern I2C_HandleTypeDef hi2c4;
  64:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32f7xx_it.c **** 
  66:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  67:Core/Src/stm32f7xx_it.c **** 
  68:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */
  70:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32f7xx_it.c **** /**
  72:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  73:Core/Src/stm32f7xx_it.c ****   */
  74:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  75:Core/Src/stm32f7xx_it.c **** {
  29              		.loc 1 75 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  76:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32f7xx_it.c **** 
  78:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32f7xx_it.c ****   while (1)
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 3


  36              		.loc 1 80 3 discriminator 1 view .LVU1
  81:Core/Src/stm32f7xx_it.c ****   {
  82:Core/Src/stm32f7xx_it.c ****   }
  37              		.loc 1 82 3 discriminator 1 view .LVU2
  80:Core/Src/stm32f7xx_it.c ****   {
  38              		.loc 1 80 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE144:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv5-sp-d16
  51              	HardFault_Handler:
  52              	.LFB145:
  83:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32f7xx_it.c **** }
  85:Core/Src/stm32f7xx_it.c **** 
  86:Core/Src/stm32f7xx_it.c **** /**
  87:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32f7xx_it.c ****   */
  89:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  90:Core/Src/stm32f7xx_it.c **** {
  53              		.loc 1 90 1 view -0
  54              		.cfi_startproc
  55              		@ Volatile: function does not return.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.L4:
  91:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32f7xx_it.c **** 
  93:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32f7xx_it.c ****   while (1)
  60              		.loc 1 94 3 discriminator 1 view .LVU5
  95:Core/Src/stm32f7xx_it.c ****   {
  96:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32f7xx_it.c ****   }
  61              		.loc 1 98 3 discriminator 1 view .LVU6
  94:Core/Src/stm32f7xx_it.c ****   {
  62              		.loc 1 94 9 discriminator 1 view .LVU7
  63 0000 FEE7     		b	.L4
  64              		.cfi_endproc
  65              	.LFE145:
  67              		.section	.text.MemManage_Handler,"ax",%progbits
  68              		.align	1
  69              		.global	MemManage_Handler
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv5-sp-d16
  75              	MemManage_Handler:
  76              	.LFB146:
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 4


  99:Core/Src/stm32f7xx_it.c **** }
 100:Core/Src/stm32f7xx_it.c **** 
 101:Core/Src/stm32f7xx_it.c **** /**
 102:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 103:Core/Src/stm32f7xx_it.c ****   */
 104:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 105:Core/Src/stm32f7xx_it.c **** {
  77              		.loc 1 105 1 view -0
  78              		.cfi_startproc
  79              		@ Volatile: function does not return.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.L6:
 106:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f7xx_it.c **** 
 108:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f7xx_it.c ****   while (1)
  84              		.loc 1 109 3 discriminator 1 view .LVU9
 110:Core/Src/stm32f7xx_it.c ****   {
 111:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32f7xx_it.c ****   }
  85              		.loc 1 113 3 discriminator 1 view .LVU10
 109:Core/Src/stm32f7xx_it.c ****   {
  86              		.loc 1 109 9 discriminator 1 view .LVU11
  87 0000 FEE7     		b	.L6
  88              		.cfi_endproc
  89              	.LFE146:
  91              		.section	.text.BusFault_Handler,"ax",%progbits
  92              		.align	1
  93              		.global	BusFault_Handler
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv5-sp-d16
  99              	BusFault_Handler:
 100              	.LFB147:
 114:Core/Src/stm32f7xx_it.c **** }
 115:Core/Src/stm32f7xx_it.c **** 
 116:Core/Src/stm32f7xx_it.c **** /**
 117:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 118:Core/Src/stm32f7xx_it.c ****   */
 119:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 120:Core/Src/stm32f7xx_it.c **** {
 101              		.loc 1 120 1 view -0
 102              		.cfi_startproc
 103              		@ Volatile: function does not return.
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.L8:
 121:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 122:Core/Src/stm32f7xx_it.c **** 
 123:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 124:Core/Src/stm32f7xx_it.c ****   while (1)
 108              		.loc 1 124 3 discriminator 1 view .LVU13
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 5


 125:Core/Src/stm32f7xx_it.c ****   {
 126:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 128:Core/Src/stm32f7xx_it.c ****   }
 109              		.loc 1 128 3 discriminator 1 view .LVU14
 124:Core/Src/stm32f7xx_it.c ****   {
 110              		.loc 1 124 9 discriminator 1 view .LVU15
 111 0000 FEE7     		b	.L8
 112              		.cfi_endproc
 113              	.LFE147:
 115              		.section	.text.UsageFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	UsageFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv5-sp-d16
 123              	UsageFault_Handler:
 124              	.LFB148:
 129:Core/Src/stm32f7xx_it.c **** }
 130:Core/Src/stm32f7xx_it.c **** 
 131:Core/Src/stm32f7xx_it.c **** /**
 132:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 133:Core/Src/stm32f7xx_it.c ****   */
 134:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 135:Core/Src/stm32f7xx_it.c **** {
 125              		.loc 1 135 1 view -0
 126              		.cfi_startproc
 127              		@ Volatile: function does not return.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.L10:
 136:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 137:Core/Src/stm32f7xx_it.c **** 
 138:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 139:Core/Src/stm32f7xx_it.c ****   while (1)
 132              		.loc 1 139 3 discriminator 1 view .LVU17
 140:Core/Src/stm32f7xx_it.c ****   {
 141:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32f7xx_it.c ****   }
 133              		.loc 1 143 3 discriminator 1 view .LVU18
 139:Core/Src/stm32f7xx_it.c ****   {
 134              		.loc 1 139 9 discriminator 1 view .LVU19
 135 0000 FEE7     		b	.L10
 136              		.cfi_endproc
 137              	.LFE148:
 139              		.section	.text.SVC_Handler,"ax",%progbits
 140              		.align	1
 141              		.global	SVC_Handler
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv5-sp-d16
 147              	SVC_Handler:
 148              	.LFB149:
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 6


 144:Core/Src/stm32f7xx_it.c **** }
 145:Core/Src/stm32f7xx_it.c **** 
 146:Core/Src/stm32f7xx_it.c **** /**
 147:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 148:Core/Src/stm32f7xx_it.c ****   */
 149:Core/Src/stm32f7xx_it.c **** void SVC_Handler(void)
 150:Core/Src/stm32f7xx_it.c **** {
 149              		.loc 1 150 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 151:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 152:Core/Src/stm32f7xx_it.c **** 
 153:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 154:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 155:Core/Src/stm32f7xx_it.c **** 
 156:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 157:Core/Src/stm32f7xx_it.c **** }
 154              		.loc 1 157 1 view .LVU21
 155 0000 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE149:
 159              		.section	.text.DebugMon_Handler,"ax",%progbits
 160              		.align	1
 161              		.global	DebugMon_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv5-sp-d16
 167              	DebugMon_Handler:
 168              	.LFB150:
 158:Core/Src/stm32f7xx_it.c **** 
 159:Core/Src/stm32f7xx_it.c **** /**
 160:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 161:Core/Src/stm32f7xx_it.c ****   */
 162:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 163:Core/Src/stm32f7xx_it.c **** {
 169              		.loc 1 163 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 164:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 165:Core/Src/stm32f7xx_it.c **** 
 166:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 167:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 168:Core/Src/stm32f7xx_it.c **** 
 169:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 170:Core/Src/stm32f7xx_it.c **** }
 174              		.loc 1 170 1 view .LVU23
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE150:
 179              		.section	.text.PendSV_Handler,"ax",%progbits
 180              		.align	1
 181              		.global	PendSV_Handler
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 7


 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv5-sp-d16
 187              	PendSV_Handler:
 188              	.LFB151:
 171:Core/Src/stm32f7xx_it.c **** 
 172:Core/Src/stm32f7xx_it.c **** /**
 173:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pendable request for system service.
 174:Core/Src/stm32f7xx_it.c ****   */
 175:Core/Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 176:Core/Src/stm32f7xx_it.c **** {
 189              		.loc 1 176 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 177:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 178:Core/Src/stm32f7xx_it.c **** 
 179:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 180:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 181:Core/Src/stm32f7xx_it.c **** 
 182:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 183:Core/Src/stm32f7xx_it.c **** }
 194              		.loc 1 183 1 view .LVU25
 195 0000 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE151:
 199              		.section	.text.SysTick_Handler,"ax",%progbits
 200              		.align	1
 201              		.global	SysTick_Handler
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv5-sp-d16
 207              	SysTick_Handler:
 208              	.LFB152:
 184:Core/Src/stm32f7xx_it.c **** 
 185:Core/Src/stm32f7xx_it.c **** /**
 186:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System tick timer.
 187:Core/Src/stm32f7xx_it.c ****   */
 188:Core/Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 189:Core/Src/stm32f7xx_it.c **** {
 209              		.loc 1 189 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 08B5     		push	{r3, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 3, -8
 217              		.cfi_offset 14, -4
 190:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 191:Core/Src/stm32f7xx_it.c **** 
 192:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 193:Core/Src/stm32f7xx_it.c ****   HAL_IncTick();
 218              		.loc 1 193 3 view .LVU27
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 8


 219 0002 FFF7FEFF 		bl	HAL_IncTick
 220              	.LVL0:
 194:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 195:Core/Src/stm32f7xx_it.c **** 
 196:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 197:Core/Src/stm32f7xx_it.c **** }
 221              		.loc 1 197 1 is_stmt 0 view .LVU28
 222 0006 08BD     		pop	{r3, pc}
 223              		.cfi_endproc
 224              	.LFE152:
 226              		.section	.text.I2C4_EV_IRQHandler,"ax",%progbits
 227              		.align	1
 228              		.global	I2C4_EV_IRQHandler
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv5-sp-d16
 234              	I2C4_EV_IRQHandler:
 235              	.LFB153:
 198:Core/Src/stm32f7xx_it.c **** 
 199:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 200:Core/Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 201:Core/Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 202:Core/Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 203:Core/Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 204:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 205:Core/Src/stm32f7xx_it.c **** 
 206:Core/Src/stm32f7xx_it.c **** /**
 207:Core/Src/stm32f7xx_it.c ****   * @brief This function handles I2C4 event interrupt.
 208:Core/Src/stm32f7xx_it.c ****   */
 209:Core/Src/stm32f7xx_it.c **** char buffer[50];
 210:Core/Src/stm32f7xx_it.c **** int write_adress = -1, read_adress = -1;
 211:Core/Src/stm32f7xx_it.c **** int index_i2c = 0;
 212:Core/Src/stm32f7xx_it.c **** 
 213:Core/Src/stm32f7xx_it.c **** void I2C4_EV_IRQHandler(void)
 214:Core/Src/stm32f7xx_it.c **** {
 236              		.loc 1 214 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 215:Core/Src/stm32f7xx_it.c ****   unsigned long isr = I2C4->ISR;
 241              		.loc 1 215 3 view .LVU30
 242              		.loc 1 215 17 is_stmt 0 view .LVU31
 243 0000 2F4B     		ldr	r3, .L33
 244 0002 9B69     		ldr	r3, [r3, #24]
 245              	.LVL1:
 216:Core/Src/stm32f7xx_it.c **** 
 217:Core/Src/stm32f7xx_it.c ****   if ( isr & I2C_ISR_TXIS ) 
 246              		.loc 1 217 3 is_stmt 1 view .LVU32
 247              		.loc 1 217 6 is_stmt 0 view .LVU33
 248 0004 13F0020F 		tst	r3, #2
 249 0008 43D1     		bne	.L31
 218:Core/Src/stm32f7xx_it.c ****   {
 219:Core/Src/stm32f7xx_it.c ****     I2C4->TXDR = i2cReg[read_adress][ index_i2c++ ];
 220:Core/Src/stm32f7xx_it.c ****   }
 221:Core/Src/stm32f7xx_it.c ****   else if ( isr & I2C_ISR_RXNE ){
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 9


 250              		.loc 1 221 8 is_stmt 1 view .LVU34
 251              		.loc 1 221 11 is_stmt 0 view .LVU35
 252 000a 13F0040F 		tst	r3, #4
 253 000e 1BD0     		beq	.L19
 254              	.LBB2:
 222:Core/Src/stm32f7xx_it.c **** 
 223:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "RX\n", 4, 100);
 224:Core/Src/stm32f7xx_it.c ****     uint8_t a = (I2C4->RXDR);
 255              		.loc 1 224 5 is_stmt 1 view .LVU36
 256              		.loc 1 224 22 is_stmt 0 view .LVU37
 257 0010 2B4A     		ldr	r2, .L33
 258 0012 516A     		ldr	r1, [r2, #36]
 259              	.LVL2:
 225:Core/Src/stm32f7xx_it.c ****     if(write_adress == -1){
 260              		.loc 1 225 5 is_stmt 1 view .LVU38
 261              		.loc 1 225 21 is_stmt 0 view .LVU39
 262 0014 2B4A     		ldr	r2, .L33+4
 263 0016 1268     		ldr	r2, [r2]
 264              		.loc 1 225 7 view .LVU40
 265 0018 B2F1FF3F 		cmp	r2, #-1
 266 001c 0AD0     		beq	.L32
 226:Core/Src/stm32f7xx_it.c ****         if(a & 1){
 227:Core/Src/stm32f7xx_it.c ****           write_adress = a;
 228:Core/Src/stm32f7xx_it.c ****         }
 229:Core/Src/stm32f7xx_it.c ****         else{
 230:Core/Src/stm32f7xx_it.c ****           read_adress = a;
 231:Core/Src/stm32f7xx_it.c ****         }
 232:Core/Src/stm32f7xx_it.c ****     }
 233:Core/Src/stm32f7xx_it.c ****     else{
 234:Core/Src/stm32f7xx_it.c ****       i2cReg[write_adress^1][ index_i2c++ ];
 267              		.loc 1 234 7 is_stmt 1 view .LVU41
 268              		.loc 1 234 40 is_stmt 0 view .LVU42
 269 001e 2A49     		ldr	r1, .L33+8
 270              	.LVL3:
 271              		.loc 1 234 40 view .LVU43
 272 0020 0A68     		ldr	r2, [r1]
 273 0022 0132     		adds	r2, r2, #1
 274 0024 0A60     		str	r2, [r1]
 275              	.L27:
 276              		.loc 1 234 40 view .LVU44
 277              	.LBE2:
 235:Core/Src/stm32f7xx_it.c ****     }
 236:Core/Src/stm32f7xx_it.c ****     
 237:Core/Src/stm32f7xx_it.c ****     //printf(buffer, "Rece %d %d\n", index1, index2);
 238:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 100);
 239:Core/Src/stm32f7xx_it.c ****   }
 240:Core/Src/stm32f7xx_it.c ****   else if ( isr & I2C_ISR_STOPF )
 241:Core/Src/stm32f7xx_it.c ****   {
 242:Core/Src/stm32f7xx_it.c ****     if(index_i2c != 0) write_adress = read_adress = -1, index_i2c = 0;
 243:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 244:Core/Src/stm32f7xx_it.c ****     I2C4->ISR |= I2C_ISR_TXE;
 245:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_STOPCF;
 246:Core/Src/stm32f7xx_it.c ****   }
 247:Core/Src/stm32f7xx_it.c ****   else if ( isr & I2C_ISR_NACKF )
 248:Core/Src/stm32f7xx_it.c ****   {
 249:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "NACK\n", 6, 100);
 250:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_NACKCF;
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 10


 251:Core/Src/stm32f7xx_it.c ****   }
 252:Core/Src/stm32f7xx_it.c ****   else if ( isr & I2C_ISR_ADDR )
 253:Core/Src/stm32f7xx_it.c ****   {
 254:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "ADDR\n", 6, 100);
 255:Core/Src/stm32f7xx_it.c ****     /* not required, the addr match interrupt is not enabled */
 256:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_ADDRCF;
 257:Core/Src/stm32f7xx_it.c ****   }
 258:Core/Src/stm32f7xx_it.c ****  
 259:Core/Src/stm32f7xx_it.c ****   /* if at any time the addr match is set, clear the flag */
 260:Core/Src/stm32f7xx_it.c ****   /* not sure, whether this is required */
 261:Core/Src/stm32f7xx_it.c ****   if ( isr & I2C_ISR_ADDR )
 278              		.loc 1 261 3 is_stmt 1 view .LVU45
 279              		.loc 1 261 6 is_stmt 0 view .LVU46
 280 0026 13F0080F 		tst	r3, #8
 281 002a 48D0     		beq	.L29
 262:Core/Src/stm32f7xx_it.c ****   {
 263:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_ADDRCF;
 282              		.loc 1 263 5 is_stmt 1 view .LVU47
 283              		.loc 1 263 15 is_stmt 0 view .LVU48
 284 002c 244B     		ldr	r3, .L33
 285              	.LVL4:
 286              		.loc 1 263 15 view .LVU49
 287 002e 0822     		movs	r2, #8
 288 0030 DA61     		str	r2, [r3, #28]
 289 0032 7047     		bx	lr
 290              	.LVL5:
 291              	.L32:
 292              	.LBB3:
 226:Core/Src/stm32f7xx_it.c ****           write_adress = a;
 293              		.loc 1 226 9 is_stmt 1 view .LVU50
 226:Core/Src/stm32f7xx_it.c ****           write_adress = a;
 294              		.loc 1 226 14 is_stmt 0 view .LVU51
 295 0034 CAB2     		uxtb	r2, r1
 226:Core/Src/stm32f7xx_it.c ****           write_adress = a;
 296              		.loc 1 226 11 view .LVU52
 297 0036 11F0010F 		tst	r1, #1
 298 003a 02D0     		beq	.L21
 227:Core/Src/stm32f7xx_it.c ****         }
 299              		.loc 1 227 11 is_stmt 1 view .LVU53
 227:Core/Src/stm32f7xx_it.c ****         }
 300              		.loc 1 227 24 is_stmt 0 view .LVU54
 301 003c 2149     		ldr	r1, .L33+4
 302              	.LVL6:
 227:Core/Src/stm32f7xx_it.c ****         }
 303              		.loc 1 227 24 view .LVU55
 304 003e 0A60     		str	r2, [r1]
 305 0040 F1E7     		b	.L27
 306              	.LVL7:
 307              	.L21:
 230:Core/Src/stm32f7xx_it.c ****         }
 308              		.loc 1 230 11 is_stmt 1 view .LVU56
 230:Core/Src/stm32f7xx_it.c ****         }
 309              		.loc 1 230 23 is_stmt 0 view .LVU57
 310 0042 2249     		ldr	r1, .L33+12
 311              	.LVL8:
 230:Core/Src/stm32f7xx_it.c ****         }
 312              		.loc 1 230 23 view .LVU58
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 11


 313 0044 0A60     		str	r2, [r1]
 314 0046 EEE7     		b	.L27
 315              	.LVL9:
 316              	.L19:
 230:Core/Src/stm32f7xx_it.c ****         }
 317              		.loc 1 230 23 view .LVU59
 318              	.LBE3:
 240:Core/Src/stm32f7xx_it.c ****   {
 319              		.loc 1 240 8 is_stmt 1 view .LVU60
 240:Core/Src/stm32f7xx_it.c ****   {
 320              		.loc 1 240 11 is_stmt 0 view .LVU61
 321 0048 13F0200F 		tst	r3, #32
 322 004c 13D0     		beq	.L22
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 323              		.loc 1 242 5 is_stmt 1 view .LVU62
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 324              		.loc 1 242 18 is_stmt 0 view .LVU63
 325 004e 1E4A     		ldr	r2, .L33+8
 326 0050 1268     		ldr	r2, [r2]
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 327              		.loc 1 242 7 view .LVU64
 328 0052 42B1     		cbz	r2, .L23
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 329              		.loc 1 242 24 is_stmt 1 discriminator 1 view .LVU65
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 330              		.loc 1 242 51 is_stmt 0 discriminator 1 view .LVU66
 331 0054 4FF0FF32 		mov	r2, #-1
 332 0058 1C49     		ldr	r1, .L33+12
 333 005a 0A60     		str	r2, [r1]
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 334              		.loc 1 242 37 discriminator 1 view .LVU67
 335 005c 1949     		ldr	r1, .L33+4
 336 005e 0A60     		str	r2, [r1]
 242:Core/Src/stm32f7xx_it.c ****     //HAL_UART_Transmit(&huart2, (uint8_t*) "STOP\n", 6, 100);
 337              		.loc 1 242 67 discriminator 1 view .LVU68
 338 0060 194A     		ldr	r2, .L33+8
 339 0062 0021     		movs	r1, #0
 340 0064 1160     		str	r1, [r2]
 341              	.L23:
 244:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_STOPCF;
 342              		.loc 1 244 5 is_stmt 1 view .LVU69
 244:Core/Src/stm32f7xx_it.c ****     I2C4->ICR = I2C_ICR_STOPCF;
 343              		.loc 1 244 15 is_stmt 0 view .LVU70
 344 0066 164A     		ldr	r2, .L33
 345 0068 9169     		ldr	r1, [r2, #24]
 346 006a 41F00101 		orr	r1, r1, #1
 347 006e 9161     		str	r1, [r2, #24]
 245:Core/Src/stm32f7xx_it.c ****   }
 348              		.loc 1 245 5 is_stmt 1 view .LVU71
 245:Core/Src/stm32f7xx_it.c ****   }
 349              		.loc 1 245 15 is_stmt 0 view .LVU72
 350 0070 2021     		movs	r1, #32
 351 0072 D161     		str	r1, [r2, #28]
 352 0074 D7E7     		b	.L27
 353              	.L22:
 247:Core/Src/stm32f7xx_it.c ****   {
 354              		.loc 1 247 8 is_stmt 1 view .LVU73
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 12


 247:Core/Src/stm32f7xx_it.c ****   {
 355              		.loc 1 247 11 is_stmt 0 view .LVU74
 356 0076 13F0100F 		tst	r3, #16
 357 007a 03D0     		beq	.L24
 250:Core/Src/stm32f7xx_it.c ****   }
 358              		.loc 1 250 5 is_stmt 1 view .LVU75
 250:Core/Src/stm32f7xx_it.c ****   }
 359              		.loc 1 250 15 is_stmt 0 view .LVU76
 360 007c 104A     		ldr	r2, .L33
 361 007e 1021     		movs	r1, #16
 362 0080 D161     		str	r1, [r2, #28]
 363 0082 D0E7     		b	.L27
 364              	.L24:
 252:Core/Src/stm32f7xx_it.c ****   {
 365              		.loc 1 252 8 is_stmt 1 view .LVU77
 252:Core/Src/stm32f7xx_it.c ****   {
 366              		.loc 1 252 11 is_stmt 0 view .LVU78
 367 0084 13F0080F 		tst	r3, #8
 368 0088 CDD0     		beq	.L27
 256:Core/Src/stm32f7xx_it.c ****   }
 369              		.loc 1 256 5 is_stmt 1 view .LVU79
 256:Core/Src/stm32f7xx_it.c ****   }
 370              		.loc 1 256 15 is_stmt 0 view .LVU80
 371 008a 0D4A     		ldr	r2, .L33
 372 008c 0821     		movs	r1, #8
 373 008e D161     		str	r1, [r2, #28]
 374 0090 C9E7     		b	.L27
 375              	.L31:
 214:Core/Src/stm32f7xx_it.c ****   unsigned long isr = I2C4->ISR;
 376              		.loc 1 214 1 view .LVU81
 377 0092 10B4     		push	{r4}
 378              	.LCFI1:
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 4, -4
 219:Core/Src/stm32f7xx_it.c ****   }
 381              		.loc 1 219 5 is_stmt 1 view .LVU82
 219:Core/Src/stm32f7xx_it.c ****   }
 382              		.loc 1 219 37 is_stmt 0 view .LVU83
 383 0094 0D4A     		ldr	r2, .L33+12
 384 0096 1468     		ldr	r4, [r2]
 219:Core/Src/stm32f7xx_it.c ****   }
 385              		.loc 1 219 48 view .LVU84
 386 0098 0B48     		ldr	r0, .L33+8
 387 009a 0168     		ldr	r1, [r0]
 388 009c 4A1C     		adds	r2, r1, #1
 389 009e 0260     		str	r2, [r0]
 219:Core/Src/stm32f7xx_it.c ****   }
 390              		.loc 1 219 37 view .LVU85
 391 00a0 0B4A     		ldr	r2, .L33+16
 392 00a2 02EB8402 		add	r2, r2, r4, lsl #2
 393 00a6 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 219:Core/Src/stm32f7xx_it.c ****   }
 394              		.loc 1 219 16 view .LVU86
 395 00a8 054A     		ldr	r2, .L33
 396 00aa 9162     		str	r1, [r2, #40]
 261:Core/Src/stm32f7xx_it.c ****   {
 397              		.loc 1 261 3 is_stmt 1 view .LVU87
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 13


 261:Core/Src/stm32f7xx_it.c ****   {
 398              		.loc 1 261 6 is_stmt 0 view .LVU88
 399 00ac 13F0080F 		tst	r3, #8
 400 00b0 02D0     		beq	.L16
 401              		.loc 1 263 5 is_stmt 1 view .LVU89
 402              		.loc 1 263 15 is_stmt 0 view .LVU90
 403 00b2 034B     		ldr	r3, .L33
 404              	.LVL10:
 405              		.loc 1 263 15 view .LVU91
 406 00b4 0822     		movs	r2, #8
 407 00b6 DA61     		str	r2, [r3, #28]
 408              	.L16:
 264:Core/Src/stm32f7xx_it.c ****   }
 265:Core/Src/stm32f7xx_it.c ****    
 266:Core/Src/stm32f7xx_it.c **** 
 267:Core/Src/stm32f7xx_it.c **** }
 409              		.loc 1 267 1 view .LVU92
 410 00b8 5DF8044B 		ldr	r4, [sp], #4
 411              	.LCFI2:
 412              		.cfi_restore 4
 413              		.cfi_def_cfa_offset 0
 414 00bc 7047     		bx	lr
 415              	.LVL11:
 416              	.L29:
 417              		.loc 1 267 1 view .LVU93
 418 00be 7047     		bx	lr
 419              	.L34:
 420              		.align	2
 421              	.L33:
 422 00c0 00600040 		.word	1073766400
 423 00c4 00000000 		.word	.LANCHOR2
 424 00c8 00000000 		.word	.LANCHOR1
 425 00cc 00000000 		.word	.LANCHOR0
 426 00d0 00000000 		.word	i2cReg
 427              		.cfi_endproc
 428              	.LFE153:
 430              		.global	index_i2c
 431              		.global	read_adress
 432              		.global	write_adress
 433              		.global	buffer
 434              		.section	.bss.buffer,"aw",%nobits
 435              		.align	2
 438              	buffer:
 439 0000 00000000 		.space	50
 439      00000000 
 439      00000000 
 439      00000000 
 439      00000000 
 440              		.section	.bss.index_i2c,"aw",%nobits
 441              		.align	2
 442              		.set	.LANCHOR1,. + 0
 445              	index_i2c:
 446 0000 00000000 		.space	4
 447              		.section	.data.read_adress,"aw"
 448              		.align	2
 449              		.set	.LANCHOR0,. + 0
 452              	read_adress:
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 14


 453 0000 FFFFFFFF 		.word	-1
 454              		.section	.data.write_adress,"aw"
 455              		.align	2
 456              		.set	.LANCHOR2,. + 0
 459              	write_adress:
 460 0000 FFFFFFFF 		.word	-1
 461              		.text
 462              	.Letext0:
 463              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 464              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 465              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 466              		.file 5 "Core/drogui/include/utils.h"
 467              		.file 6 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7xx_it.c
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:18     .text.NMI_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:26     .text.NMI_Handler:00000000 NMI_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:44     .text.HardFault_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:51     .text.HardFault_Handler:00000000 HardFault_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:68     .text.MemManage_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:75     .text.MemManage_Handler:00000000 MemManage_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:92     .text.BusFault_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:99     .text.BusFault_Handler:00000000 BusFault_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:116    .text.UsageFault_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:123    .text.UsageFault_Handler:00000000 UsageFault_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:140    .text.SVC_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:147    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:160    .text.DebugMon_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:167    .text.DebugMon_Handler:00000000 DebugMon_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:180    .text.PendSV_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:187    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:200    .text.SysTick_Handler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:207    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:227    .text.I2C4_EV_IRQHandler:00000000 $t
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:234    .text.I2C4_EV_IRQHandler:00000000 I2C4_EV_IRQHandler
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:422    .text.I2C4_EV_IRQHandler:000000c0 $d
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:445    .bss.index_i2c:00000000 index_i2c
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:452    .data.read_adress:00000000 read_adress
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:459    .data.write_adress:00000000 write_adress
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:438    .bss.buffer:00000000 buffer
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:435    .bss.buffer:00000000 $d
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:441    .bss.index_i2c:00000000 $d
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:448    .data.read_adress:00000000 $d
C:\Users\roger\AppData\Local\Temp\ccrSVXAL.s:455    .data.write_adress:00000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
i2cReg
