//#define MAGCALIB_TEST
#ifdef MAGCALIB_TEST

#include "..\headers\main.h"
#include "..\headers\matlib.h"
#include "..\headers\MPU9250.h"
#include <Arduino.h>
/*float mx[] = {-249, -255, -260, -254, -261, -255, -254, -263, -257, -259, -250, -265, -255, -262, -262, \ 
-260, -251, -272, -261, -273, -266, -269, -291, -286, -262, -269, -262, -282, -299, -291, \ 
-284, -277, -291, -288, -305, -286, -314, -372, -405, -415, -350, -311, -311, -340, -395, \ 
-424, -447, -457, -460, -458, -444, -458, -477, -483, -467, -449, -451, -457, -486, -504, \ 
-494, -497, -469, -462, -481, -496, -522, -498, -484, -484, -489, -503, -505, -495, -475, \ 
-453, -444, -425, -439, -435, -411, -341, -300, -289, -293, -286, -286, -264, -248, -259, \ 
-265, -256, -258, -270, -263, -263, -275, -291, -296, -303, -322, -326, -332, -318, -318, \ 
-329, -350, -356, -355, -357, -368, -354, -362, -397, -416, -413, -372, -364, -383, -378, \ 
-377, -386, -390, -376, -387, -402, -424, -438, -447, -447, -452, -453, -460, -463, -479, \ 
-499, -492, -505, -487, -446, -453, -464, -487, -520, -504, -519, -476, -419, -435, -487, \ 
-499, -497, -481, -480, -419, -344, -311, -293, -280, -270, -258, -271, -293, -263, -254, \ 
-293, -345, -307, -261, -276, -297, -292, -250, -285, -317, -314, -307, -338, -368, -389, \ 
-388, -384, -371, -390, -398, -414, -457, -496, -510, -519, -510, -512, -506, -506, -506, \ 
-505, -513, -513, -511, -517, -511, -506, -509, -486, -485, -483, -496, -484, -409, -299, \ 
-279, -270, -266, -259, -253, -267, -325, -383, -424, -420, -429, -447, -483, -514, -481, \ 
-421, -352, -326, -302, -299, -291, -281, -268, -247, -261, -256, -258, -256, -254, -254, \ 
-266, -252, -262, -316, -350, -388, -403, -410, -423, -442, -501, -497, -441, -370, -322, \ 
-367, -483, -504, -510, -498, -517, -506, -511, -510, -504, -509, -507, -511, -513, -505, \ 
-514, -509, -508, -515, -517, -513, -508, -493, -487, -486, -501, -504, -498, -508, -521, \ 
-513, -512, -516, -514, -497, -492, -498, -501, -459, -387, -354, -325, -313, -317, -271, \ 
-377, -435, -454, -465, -471, -473, -470, -484, -475, -484, -477, -480, -493, -498, -507, \ 
-503, -512, -501, -503, -494, -400, -307, -290, -287, -269, -298, -407, -446, -444, -443, \ 
-454, -461, -473, -477, -506, -498, -484, -468, -466, -436, -363, -335, -369, -458, -484, \ 
-491, -498, -502, -509, -511, -503, -515, -443, -322, -371, -456, -489, -458, -463, -513, \ 
-482, -343, -350, -423, -497, -462, -473, -510, -477, -338, -323, -426, -496, -472, -431, \ 
-484, -504, -479, -362, -339, -432, -497, -480, -451, -493, -492, -379, -327, -459, -494, \ 
-491, -481, -490, -449, -340, -322, -392, -410, -433, -460, -454, -448, -427, -423, -420, \ 
-421, -345, -275, -258, -264, -275, -295, -338, -381, -388, -393, -432, -509, -482, -385, \ 
-402, -469, -512, -486, -434, -340, -290, -353, -412, -473, -503, -476, -446, -409, -355, \ 
-342, -332, -291, -303, -321, -357, -380, -400, -401, -397, -393, -402, -389, -394, -394, \ 
-397, -391, -391, -391, -390, -392, -397, -399, -397, -398, -404, -398, -385, -398, -390, \ 
-396, -396, -397, -394, -394 };
float my[] = {11, -13, -20, -6, 5, -9, 2, 11, 25, 25, 18, 23, 7, -4, 0, \ 
-4, -1, 24, 23, 21, 24, 3, -9, -10, -24, -33, -24, 36, 55, 35, \ 
-32, -63, -55, -52, -61, -82, -44, 26, 21, -9, -72, -89, -99, -100, -45, \ 
8, 21, 29, 10, 10, 4, -30, -59, -21, 59, 89, 87, 59, 12, -32, \ 
-58, -21, 63, 78, 73, 46, 42, 66, 100, 106, 81, 11, -15, 13, 71, \ 
101, 106, 91, 71, 57, 67, 71, 66, 71, 73, 50, 42, 26, 36, 9, \ 
17, 16, 52, 58, 29, -17, -53, -47, -62, -83, -12, 58, 22, -54, -98, \ 
-97, -82, -100, -109, -47, -6, -28, -112, -103, -88, -113, -84, -24, -1, -36, \ 
-105, -118, -114, -108, -65, -14, 12, 16, 1, -15, -14, 5, 26, 31, 7, \ 
-37, -52, -59, -3, 80, 107, 84, 35, -24, -50, -7, 76, 123, 123, 95, \ 
61, 59, 65, 70, 85, 100, 87, 89, 78, 60, 26, -45, -59, -3, 18, \ 
25, 35, 43, -9, -26, -17, 36, 48, 1, -17, -36, -61, -88, -78, -75, \ 
-64, -54, -49, -36, -18, 34, 21, -8, -4, 15, 26, 40, 56, 62, 58, \ 
55, 31, 27, 17, 5, -1, -16, -29, -32, -1, -11, -16, 6, -7, -25, \ 
-15, -8, -6, -9, 17, 33, 51, 53, 56, 72, 29, -27, -21, 38, 85, \ 
95, 46, -2, -24, -27, -7, -3, 4, 33, 35, 12, 20, 24, 32, 34, \ 
40, 34, 46, 32, 18, -14, 13, 34, 11, -24, -39, -3, 7, 22, -10, \ 
-73, -81, -16, -2, -8, -13, -14, -17, 6, 34, 37, 39, 49, 49, 45, \ 
40, 39, 28, 7, 3, 1, -40, -57, -39, -28, -31, -30, -18, 10, 19, \ 
37, 34, 26, 32, 61, 54, 62, 67, 101, 119, 98, 115, 105, 103, 59, \ 
15, -25, -24, -17, -9, -23, -30, -24, -31, -42, -37, -34, -21, -4, -11, \ 
-17, -16, -17, -15, 22, 26, 41, 20, 21, 5, -6, -9, -54, -48, -39, \ 
-42, -39, -43, -29, -24, 12, 20, 16, 12, 22, 41, 7, -67, -100, -60, \ 
-67, -52, -54, -43, -29, -21, 3, 55, 20, -111, -94, -11, 36, -7, -9, \ 
28, -1, -96, -99, -13, 56, 1, -26, 21, 6, -95, -110, -52, 62, 43, \ 
-34, -38, 3, -2, -85, -114, -37, 38, 15, -43, -16, 11, -67, -99, -28, \ 
-1, -35, -68, -11, -4, -60, -118, -116, -109, -92, -58, -32, -29, -31, -38, \ 
-55, -45, -3, 20, -16, -19, -37, -28, 5, 18, 33, 56, 41, 6, 17, \ 
28, 23, 0, -24, -50, -40, 18, 105, 136, 103, -13, -70, -92, -91, -91, \ 
-88, -96, -79, -77, -97, -113, -118, -122, -127, -131, -119, -120, -123, -128, -130, \ 
-123, -127, -121, -133, -116, -120, -135, -127, -119, -120, -124, -124, -125, -124, -118, \ 
-124, -120, -123, -118, -122};

float mz[] = {5, -17, -18, -24, -39, -33, -52, -71, -59, -31, -30, -49, -31, -38, -30, \ 
-44, -39, -54, -71, -67, -62, -81, -105, -100, -72, -25, 34, 82, 89, 95, \ 
84, 21, -61, -86, -77, -20, 104, 142, 143, 127, 104, 27, -17, 52, 119, \ 
128, 109, 107, 106, 94, 106, 90, 47, 79, 79, 69, 73, 83, 68, 28, \ 
8, 47, 75, 72, 59, 48, -8, -64, -52, -38, -45, -69, -67, -85, -97, \ 
-73, -96, -115, -131, -133, -141, -111, -104, -85, -97, -100, -94, -74, -36, -37, \ 
-31, -26, -14, 20, 47, 23, -49, -85, -68, 15, 110, 108, 112, 70, 14, \ 
-81, -102, -72, 35, 113, 126, 106, 30, -77, -106, -53, 74, 118, 121, 108, \ 
37, -72, -68, 12, 91, 118, 114, 114, 107, 107, 106, 101, 94, 93, 87, \ 
27, -38, -25, 69, 86, 53, 60, 69, 2, -38, 11, 64, 43, 23, -35, \ 
-61, -55, -71, -78, -115, -104, -95, -81, -64, -56, -26, 21, 73, 41, -44, \ 
-109, -139, -123, -21, 52, 79, 86, -12, -109, -125, -126, -95, -90, -110, -123, \ 
-128, -128, -137, -142, -142, -154, -125, -80, -36, -13, 10, 8, -16, -40, -38, \ 
-41, -35, -35, -13, -9, -13, -4, 5, 38, 85, 71, 66, 74, 117, 93, \ 
53, 56, 30, 29, -9, -77, -133, -147, -132, -124, -141, -131, -89, -46, 19, \ 
85, 122, 116, 88, 85, 81, 71, 52, -7, -31, -4, -16, -24, -24, -20, \ 
-18, -22, 50, 102, 120, 118, 125, 128, 121, 106, 5, -95, -137, -150, -132, \ 
-109, -43, 22, 34, 22, 17, 4, 9, 14, 0, -5, 15, -1, -33, -39, \ 
-46, -31, -38, -17, -19, -11, -22, 15, 53, 60, 41, 28, 32, 18, -9, \ 
-27, -14, 8, -4, -53, -82, -46, -37, -73, -85, -98, -71, -81, -73, 25, \ 
119, 103, 110, 89, 85, 81, 86, 74, 65, 80, 63, 62, 63, 54, 35, \ 
35, 30, 23, 25, -76, -144, -119, -110, -109, -59, 72, 119, 96, 96, 93, \ 
84, 83, 79, 71, 32, -60, -102, -106, -122, -148, -147, -135, -135, -56, 24, \ 
5, -6, 2, -7, 5, -53, -1, 103, 108, 25, -50, -83, -116, -121, -29, \ 
82, 115, 40, -53, -81, -120, -105, -42, 83, 112, 51, -28, -70, -94, -137, \ 
-94, -14, 85, 116, 71, 10, -59, -108, -121, -55, 60, 117, 73, -27, -80, \ 
-95, -87, 0, 105, 108, 72, 6, -24, -17, 20, 72, 96, 113, 107, 110, \ 
101, 111, 59, -14, -62, -73, -95, -132, -151, -142, -145, -138, -61, 82, 117, \ 
124, 99, 6, -80, -128, -132, -112, -99, -58, -1, 35, 46, 44, 65, 63, \ 
40, 34, -1, -63, -43, -13, -10, -22, -11, -5, -31, -20, -23, -18, -22, \ 
-21, -25, -25, -25, -18, -22, -27, -27, -17, -20, -26, -24, -25, -22, -18, \ 
-24, -30, -19, -22, -24};

float _dis3d(float x,float y,float z, float a, float b, float c){
    return sqrt((x - a)*(x - a) + (y - b)*(y - b) + (z - c)*(z - c));
}*/

// float off_mx ,off_my ,off_mz ,scl_magx ,scl_magy,scl_magz ;

int _main(void){
    /*
    int head = 0, cnt = 0;
    bool done = false, valid;
    const int n = 100;
    float scaleGlobal = 0.01, magX, magY, magZ;

    float mag[n][3], scale, aux;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < 3; j++){
            mag[i][j] = 0;
        }    
    }
    int t = 0;
    while (!done){
        magX = mx[t]*scaleGlobal;
        magY = my[t]*scaleGlobal;
        magZ = mz[t++]*scaleGlobal;

        valid = true;
        for(int i = 1 ; i <= n-1 ; i++){
            int j = (head - i + n) % n;
            Serial.println(_dis3d(magX, magY, magZ, mag[j][0], mag[j][1], mag[j][2]));
            if(_dis3d(magX, magY, magZ, mag[j][0], mag[j][1], mag[j][2]) < 0.3){
                valid = false; break;
            } 
        }
        if(valid){
            mag[head][0] = magX, mag[head][1] = magY, mag[head][2] = magZ;
            head++, cnt++, head%= n; 
        }
        if(cnt == n){done = true;}
        if(t ==  470){  Serial.println(cnt);Serial.println("increase threshold"); while(1);}
    }
    mat H, Ht, w, prod, prod2, X, inverse;
    matInit(&H, n, 6);
    matInit(&Ht, 6, n);
    matInit(&prod, 6, 6);
    matInit(&prod2, 6, n);
    matInit(&inverse, 6, 6);
    matInit(&w, n, 1);
    matInit(&X, 6, 1);
    for(int i = 0; i < n; i++){
        setMatVal(&H, i, 0, mag[i][0]);
        setMatVal(&H, i, 1, mag[i][1]);
        setMatVal(&H, i, 2, mag[i][2]);
        setMatVal(&H, i, 3, -mag[i][1]*mag[i][1]);
        setMatVal(&H, i, 4, -mag[i][2]*mag[i][2]);
        setMatVal(&H, i, 5, 1);

        setMatVal(&w, i, 0, mag[i][0]*mag[i][0]);
    }
    matTrans(&Ht, &H);
    matMult(&prod, &Ht, &H);
    
    for(int i = 0; i < prod.row; i++){
        for(int j = 0; j < prod.col; j++){
            Serial.print(getMatVal(&prod, i, j));
            Serial.print(" ");
        }
        Serial.println();
    }
    matInverse(&inverse, &prod);
    matMult(&prod2, &inverse, &Ht);
    matMult(&X, &prod2, &w);
    
    for(int i = 0; i < 6; i++)
        Serial.println(getMatVal(&X, i, 0));
    
    
    off_mx = getMatVal(&X, 0, 0)/(2);
    off_my = getMatVal(&X, 1, 0)/(2*getMatVal(&X, 3, 0));
    off_mz = getMatVal(&X, 2, 0)/(2*getMatVal(&X, 4, 0));
    float temp = getMatVal(&X, 5, 0) + off_mx * off_mx +  off_my * off_my +  off_mz *off_mz;

    off_mx /= scaleGlobal;
    off_my /= scaleGlobal;
    off_mz /= scaleGlobal;

    scl_magx = sqrt(temp)/ (scaleGlobal);
    scl_magy = sqrt(temp / getMatVal(&X, 3, 0)) / (scaleGlobal);
    scl_magz = sqrt(temp / getMatVal(&X, 4, 0)) / (scaleGlobal);

    Serial.print( off_mx);
    Serial.print("\t");
    Serial.print( off_my);
    Serial.print("\t");
    Serial.print( off_mz);
    Serial.print("\t");
    Serial.println(scl_magx);
    Serial.print("\t");
    Serial.println(scl_magy);
    Serial.print("\t");
    Serial.println( scl_magz);
    
    matDestruct(&H);
    matDestruct(&Ht);
    matDestruct(&prod);    
    matDestruct(&prod2); 
    matDestruct(&inverse); 
    matDestruct(&w); 
    matDestruct(&X); 
    
    Serial.print("mx = [ ");
    for(int i = 0 ; i < 469 ; i++){
        Serial.print((mx[i]-off_mx)/scl_magx), Serial.print(";");
    }
    Serial.print((mx[469]-off_mx)/scl_magx), Serial.println("];");
    
    
    Serial.print("my = [ ");
    for(int i = 0 ; i < 469 ; i++){
        Serial.print((my[i]-off_my)/scl_magy), Serial.print(";");
    }
    Serial.print((my[469]-off_my)/scl_magy), Serial.println("];");
    
    
    Serial.print("mz = [ ");
    for(int i = 0 ; i < 469 ; i++){
        Serial.print((mz[i]-off_mz)/scl_magz), Serial.print(";");
    }
    Serial.print((mz[469]-off_mz)/scl_magz), Serial.println("];");
    
    */
    
    mpu9250 myImu;
    initMpu(&myImu);
    calibrateMag(&myImu);
    while(1);



    return 0;
}
#endif
/*
-384.39	10.07	-11.30	130.88

	131.19

	142.10

*/